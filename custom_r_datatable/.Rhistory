list.files()
getwd()
dir.create("data2")
rates <- readRDS("data/rates.RDS")
View(rates)
rates <- readRDS("data/rates.RDS") %>%
rename(Year = year, Age = age)
library(dplyr)
rates <- readRDS("data/rates.RDS") %>%
rename(Year = year, Age = age)
View(rates)
str(rates)
rates <- readRDS("data/rates.RDS") %>%
rename(Year = year, Age = age) %>%
as.data.frame(.)
rates <- readRDS("data/rates.RDS") %>%
rename(Year = year, Age = age) %>%
as.data.frame(.)
rates %>% # overall mortality
select(Year, Age, sex, Mortality_Rate = rate_mortality) %>%
write.csv(., file = "data2/Mortality_Rates.csv", row.names = FALSE)
rates %>% # IHD mortality
select(Year, Age, sex, Mortality_Rate = rate_mortality_ihd) %>%
write.csv(., file = "data2/ihd_mortality_rate.csv", row.names = FALSE)
rates %>% # IHD incidence
select(Year, Age, sex, Incidence = rate_incidence_ihd) %>%
write.csv(., file = "data2/IHD incidence rates.csv", row.names = FALSE)
life_table <- readRDS("data/life_table.RDS")
View(life_table)
names(life_table)
life_table <- readRDS("data/life_table.RDS")
life_table %>%
rename(ex = yll) %>%
write.csv("data2/interpolated_reference_life_table.csv", row.names = FALSE)
if (recreate_source_files) {
write.csv(readRDS(pop_level1), file = "data2/Hello_World_Population.csv")
}
recreate_source_files <- TRUE
if (recreate_source_files) {
write.csv(readRDS(pop_level1), file = "data2/Hello_World_Population.csv")
}
if (recreate_source_files) {
write.csv(readRDS("data/pop_level1.RDS"), file = "data2/Hello_World_Population.csv")
}
if (recreate_source_files) {
write.csv(readRDS("data/pop_level1.RDS"), file = "data2/Hello_World_Population.csv")
write.csv(readRDS("data/pop_level2.RDS", file = "data2/level2_population.csv"))
}
if (recreate_source_files) {
write.csv(readRDS("data/pop_level1.RDS"),
file = "data2/Hello_World_Population.csv", row.names = FALSE )
write.csv( readRDS("data/pop_level2.RDS"),
file = "data2/level2_population.csv", row.names = FALSE )
}
View(life_table)
tmp <- read.csv("data2/interpolated_reference_life_table.csv")
View(tmp)
life_table <- readRDS("data/life_table.RDS")
View(life_table)
life_table %>%
rename(ex = yll) %>%
write.csv("data2/interpolated_reference_life_table.csv", row.names = FALSE)
getwd()
#
# 03_microsim_level1.R
#
# Reed Sorensen
# May 2016
#
require(dplyr)
require(data.table)
require(stringr)
source("02_functions.R") # load utility functions
# load rates and life table
rates_tmp <- readRDS("data/rates.RDS")
life_table <- readRDS("data/life_table.RDS")
# set simulation parameters
start_year <- 1990
end_year <- 2013
death_state <- "died"
other_states <- NULL
disability_weights <- data.table(
id_number = 0,
weight = 0.0,
description = "Healthy"
)
# set up baseline population
pop <- readRDS("data/pop_level1.RDS")
R.Version()
install.packages("data.table")
#
# 03_microsim_level1.R
#
# Reed Sorensen
# May 2016
#
require(dplyr)
require(data.table)
require(stringr)
source("02_functions.R") # load utility functions
# load rates and life table
rates_tmp <- readRDS("data/rates.RDS")
life_table <- readRDS("data/life_table.RDS")
# set simulation parameters
start_year <- 1990
end_year <- 2013
death_state <- "died"
other_states <- NULL
disability_weights <- data.table(
id_number = 0,
weight = 0.0,
description = "Healthy"
)
# set up baseline population
pop <- readRDS("data/pop_level1.RDS")
#
# 03_microsim_level1.R
#
# Reed Sorensen
# May 2016
#
require(dplyr)
require(data.table)
require(stringr)
source("02_functions.R") # load utility functions
# load rates and life table
rates_tmp <- readRDS("data/rates.RDS")
life_table <- readRDS("data/life_table.RDS")
# set simulation parameters
start_year <- 1990
end_year <- 2013
death_state <- "died"
other_states <- NULL
disability_weights <- data.table(
id_number = 0,
weight = 0.0,
description = "Healthy"
)
# set up baseline population
pop <- readRDS("data/pop_level1.RDS")
sims <- select(pop, id = simulant_id, age, sex) %>%
.[, age_start := age] %>%
.[, cost := 0] %>%
.[, disability_state := as.integer(0)] %>%
.[, ihd := as.integer(0)] %>% # patch
.[, (death_state) := as.integer(9) ] %>%
.[, (paste0(death_state, "_history")) := ""] %>%
.[, disability_state_history := ""]
run_microsim <- function(intervention = FALSE, seed = 123) {
# intervention <- TRUE; seed <- 123 # dev variable
set.seed(seed)
# define intervention
rates <- copy(rates_tmp)
if (intervention) {
rates[age >= 25 & year >= 1995, rate_mortality := rate_mortality / 2]
}
# convert rates to probabilities, and retain only the needed vars
probs <- rate2prob(rates)
prob_vars <- c("prob_mortality")
probs <- probs[, (c("year", "age", "sex", prob_vars)), with = FALSE]
setkeyv(probs, c("sex", "age")) # set key for merge
# run simulation
system.time(for (yr in start_year:end_year) {
# yr <- 1990 # dev variable
# update age and get new probabilities
sims[, age := age_start + yr - start_year]
setkeyv(sims, c("sex", "age"))
probs2 <- probs[year == yr][, year := NULL]
sims <- probs2[sims]
# apply changes
sims[died != 1, died := rbinom(.N, 1, prob_mortality)]
# record changes
sims[, died_history := paste0(died_history, died)]
# add cost
sims[age >= 25 & yr >= 1995 & died != 1 & intervention, cost := cost + 2]
sims[, (prob_vars) := NULL] # remove yr-specific probs
})
# calculate DALYs and costs
sims2 <- add_costs_dalys(sims, d_weights = disability_weights)
return(sims2)
}
system.time(result <- get_ICER(seed = 125, check_ihd = TRUE))
#
# 03_microsim_level2.R
#
# Reed Sorensen
# May 2016
#
require(Rmisc)
require(dplyr)
require(data.table)
require(stringr)
source("02_functions.R") # load utility functions
# load rates and life table
rates_tmp <- readRDS("data/rates.RDS")
life_table <- readRDS("data/life_table.RDS")
# set simulation parameters
start_year <- 1990
end_year <- 2013
death_state <- "died"
other_states <- "ihd"
disability_weights <- data.table(
id_number = c(0, 1),
weight = c(0, 0.08),
description = c("Healthy", "IHD only")
)
# set up baseline population
pop <- readRDS("data/pop_level2.RDS")
sims <- select(pop, id = simulant_id, age, sex, ihd = IHD) %>%
.[, `:=`(
age_start = age,
cost = 0,
disability_state = as.integer(0),
disability_state_history = "")] %>%
.[, (death_state) := as.integer(9)] %>%
.[, (other_states) := as.integer(get(other_states))] %>%
.[, (paste0(c(death_state, other_states), "_history")) := "" ]
if (!all(other_states %in% names(sims))) {
stop("All states must have a starting value")
}
run_microsim <- function(intervention = FALSE, seed = 123) {
# intervention <- FALSE; seed <- 123 # dev variables
set.seed(seed)
# define intervention
rates <- copy(rates_tmp)
if (intervention) {
rates[age >= 25 & year >= 1995, rate_incidence_ihd := rate_incidence_ihd / 2]
}
# convert rates to probabilities, and retain only the needed vars
probs <- rate2prob(rates)
prob_vars <- c("prob_mortality", "prob_mortality_ihd_plus", "prob_incidence_ihd")
probs <- probs[, (c("year", "age", "sex", prob_vars)), with = FALSE]
setkeyv(probs, c("sex", "age")) # set key for merge
# run simulation
system.time(for (yr in start_year:end_year) {
# yr <- 1990 # dev variable
# update age and get new probabilities
sims[, age := age_start + yr - start_year]
setkeyv(sims, c("sex", "age"))
probs2 <- probs[year == yr][, year := NULL]
sims <- probs2[sims]
# apply changes
sims[died != 1 & ihd == 1, # if have IHD, adjust mortality prob
prob_mortality := prob_mortality_ihd_plus]
sims[died != 1, # if alive, apply mortality prob
died := rbinom(.N, 1, prob_mortality)]
sims[died != 1 & ihd != 1, # if not have IHD, apply IHD incidence
ihd := rbinom(.N, 1, prob_incidence_ihd)]
sims[died == 1, # if dead, make IHD null (9)
ihd := 9]
# update disability state
sims[ihd == 1, disability_state := 1]
# record changes
sims[, died_history := paste0(died_history, died)]
sims[, ihd_history := paste0(ihd_history, ihd)]
sims[, disability_state_history := paste0(disability_state_history, disability_state)]
# add cost
sims[age >= 25 & yr >= 1995 & died != 1 & intervention, cost := cost + 2]
sims[, (prob_vars) := NULL] # remove yr-specific probs
})
# calculate DALYs and costs
sims2 <- summarize_results(sims, d_weights = disability_weights)
return(sims2)
}
system.time(result <- get_ICER(seed = 125, check_ihd = TRUE))
#
# 03_microsim_level1.R
#
# Reed Sorensen
# May 2016
#
require(dplyr)
require(data.table)
require(stringr)
source("02_functions.R") # load utility functions
# load rates and life table
rates_tmp <- readRDS("data/rates.RDS")
life_table <- readRDS("data/life_table.RDS")
# set simulation parameters
start_year <- 1990
end_year <- 2013
death_state <- "died"
other_states <- NULL
disability_weights <- data.table(
id_number = 0,
weight = 0.0,
description = "Healthy"
)
# set up baseline population
pop <- readRDS("data/pop_level1.RDS")
sims <- select(pop, id = simulant_id, age, sex) %>%
.[, age_start := age] %>%
.[, cost := 0] %>%
.[, disability_state := as.integer(0)] %>%
.[, ihd := as.integer(0)] %>% # patch
.[, (death_state) := as.integer(9) ] %>%
.[, (paste0(death_state, "_history")) := ""] %>%
.[, disability_state_history := ""]
run_microsim <- function(intervention = FALSE, seed = 123) {
# intervention <- TRUE; seed <- 123 # dev variable
set.seed(seed)
# define intervention
rates <- copy(rates_tmp)
if (intervention) {
rates[age >= 25 & year >= 1995, rate_mortality := rate_mortality / 2]
}
# convert rates to probabilities, and retain only the needed vars
probs <- rate2prob(rates)
prob_vars <- c("prob_mortality")
probs <- probs[, (c("year", "age", "sex", prob_vars)), with = FALSE]
setkeyv(probs, c("sex", "age")) # set key for merge
# run simulation
system.time(for (yr in start_year:end_year) {
# yr <- 1990 # dev variable
# update age and get new probabilities
sims[, age := age_start + yr - start_year]
setkeyv(sims, c("sex", "age"))
probs2 <- probs[year == yr][, year := NULL]
sims <- probs2[sims]
# apply changes
sims[died != 1, died := rbinom(.N, 1, prob_mortality)]
# record changes
sims[, died_history := paste0(died_history, died)]
# add cost
sims[age >= 25 & yr >= 1995 & died != 1 & intervention, cost := cost + 2]
sims[, (prob_vars) := NULL] # remove yr-specific probs
})
# calculate DALYs and costs
sims2 <- summarize_results(sims, d_weights = disability_weights)
return(sims2)
}
system.time(result <- get_ICER(seed = 125, check_ihd = TRUE))
require(Rmisc)
results <- mapply(get_ICER, 1:20, TRUE)
install.packages("Rmisc")
require(Rmisc)
results <- mapply(get_ICER, 1:20, TRUE)
t(apply(results, 1, CI))
system.time(result <- get_ICER(seed = 125, check_ihd = TRUE))
result
(int_cost - base_cost) / (int_yll - base_yll)
#
# liam-2 results
#
int_yll <- 39822
int_cost <- 201756
base_yll <- 57702
base_cost <- 0
(int_cost - base_cost) / (int_yll - base_yll)
install.packages("msm")
int_cost - base_cost
(int_cost - base_cost) / (int_yll - base_yll)
int_yll - base_yll
